
-- 1. Création de la base
CREATE DATABASE IF NOT EXISTS mind_care
  CHARACTER SET utf8mb4
  COLLATE utf8mb4_unicode_ci;
USE mindcare;

-- 2. UTILISATEUR
DROP TABLE IF EXISTS UTILISATEUR;
CREATE TABLE UTILISATEUR (
  uuid CHAR(36) PRIMARY KEY,
  email VARCHAR(255) NOT NULL UNIQUE,
  mot_de_passe VARCHAR(255) NOT NULL,
  prenom VARCHAR(100) NOT NULL,
  nom VARCHAR(100) NOT NULL,
  date_naissance DATE NULL,
  telephone VARCHAR(20) NULL,
  adresse VARCHAR(255) NULL,
  code_postal VARCHAR(10) NULL,
  ville VARCHAR(100) NULL,
  sexe ENUM('Homme','Femme','Ne préfère pas dire') NOT NULL DEFAULT 'Ne préfère pas dire',
  role ENUM('patient','professionnel') NOT NULL,
  date_creation DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- 3. PATIENT
DROP TABLE IF EXISTS PATIENT;
CREATE TABLE PATIENT (
  uuid CHAR(36) PRIMARY KEY,
  donnees_medicales VARBINARY(8192) NULL,
  date_creation DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  date_maj DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_patient_utilisateur FOREIGN KEY (uuid)
    REFERENCES UTILISATEUR(uuid) ON DELETE CASCADE
) ENGINE=InnoDB;

-- 4. PROFESSIONNEL
DROP TABLE IF EXISTS PROFESSIONNEL;
CREATE TABLE PROFESSIONNEL (
  uuid CHAR(36) PRIMARY KEY,
  specialite VARCHAR(100) NOT NULL,
  description TEXT NULL,
  telephone_pro VARCHAR(20) NULL,
  site_web VARCHAR(255) NULL,
  date_creation DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_pro_utilisateur FOREIGN KEY (uuid)
    REFERENCES UTILISATEUR(uuid) ON DELETE CASCADE
) ENGINE=InnoDB;

-- 5. JOURNAL_ENTREE
DROP TABLE IF EXISTS JOURNAL_ENTREE;
CREATE TABLE JOURNAL_ENTREE (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  patient_uuid CHAR(36) NOT NULL,
  date_journal DATE NOT NULL,
  titre VARCHAR(255) NOT NULL,
  contenu TEXT NOT NULL,
  humeur TINYINT NULL CHECK (humeur BETWEEN 1 AND 5),
  tags JSON NULL,
  confidentiel BOOLEAN NOT NULL DEFAULT FALSE,
  date_creation DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_journal_patient FOREIGN KEY (patient_uuid)
    REFERENCES PATIENT(uuid) ON DELETE CASCADE
) ENGINE=InnoDB;

-- 6. EXERCICE
DROP TABLE IF EXISTS EXERCICE;
CREATE TABLE EXERCICE (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  titre VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  date_creation DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- 7. RENDEZVOUS
DROP TABLE IF EXISTS RENDEZVOUS;
CREATE TABLE RENDEZVOUS (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  patient_uuid CHAR(36) NOT NULL,
  professionnel_uuid CHAR(36) NOT NULL,
  date_programmee DATETIME NOT NULL,
  statut ENUM('scheduled','done','cancelled') NOT NULL DEFAULT 'scheduled',
  motif VARCHAR(255) NULL,
  date_creation DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_rdv_patient FOREIGN KEY (patient_uuid)
    REFERENCES PATIENT(uuid) ON DELETE CASCADE,
  CONSTRAINT fk_rdv_pro FOREIGN KEY (professionnel_uuid)
    REFERENCES PROFESSIONNEL(uuid) ON DELETE CASCADE
) ENGINE=InnoDB;

-- 8. MESSAGE
DROP TABLE IF EXISTS MESSAGE;
CREATE TABLE MESSAGE (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  de_uuid CHAR(36) NOT NULL,
  a_uuid CHAR(36) NOT NULL,
  date_envoi DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  contenu VARBINARY(2048) NOT NULL,
  CONSTRAINT fk_msg_de FOREIGN KEY (de_uuid)
    REFERENCES UTILISATEUR(uuid) ON DELETE CASCADE,
  CONSTRAINT fk_msg_a FOREIGN KEY (a_uuid)
    REFERENCES UTILISATEUR(uuid) ON DELETE CASCADE
) ENGINE=InnoDB;

-- 9. Indexation
CREATE INDEX idx_journal_patient_date ON JOURNAL_ENTREE(patient_uuid, date_journal);
CREATE INDEX idx_rdv_date ON RENDEZVOUS(date_programmee);
